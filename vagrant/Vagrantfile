# -*- mode: ruby -*-
# vi: set ft=ruby :

# Set vagrant resources dynamically with default values
amount_cpu = 2
if ENV.has_key? 'VAGRANT_CPU'
  amount_cpu = ENV['VAGRANT_CPU']
end

amount_mem = 4096
if ENV.has_key? 'VAGRANT_MEM'
  amount_mem = ENV['VAGRANT_MEM']
end

Vagrant.configure("2") do |config|
  config.vm.box = "ilionx/ubuntu2204"
  config.vm.box_version = "1.3.1-20230619"
  config.vm.box_check_update = false
  config.vm.hostname = "devops-interview"
  config.vm.boot_timeout = 360

  config.vm.provider "virtualbox" do |vbox|
    vbox.cpus = amount_cpu
    vbox.memory = amount_mem
  end

  # Virtualbox specific settings
  config.vm.provider "virtualbox" do |vb|
    # Make sure the VirtualBox clock remains in sync
    vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-interval", 10000 ]
    vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-min-adjust", 100 ]
    vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-on-restore", 1 ]
    vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-start", 1 ]
    vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 1000 ]

    # Fixes bug with audio stack on macOS
    vb.customize [ "modifyvm", :id, "--audio", "none", "--audioin", "off", "--audioout", "off" ]

    # Disable virtualbox remote desktop support
    vb.customize [ "modifyvm", :id, "--vrde", "off" ]

    # Fixes bug with video stack on macOS
    vb.customize [ "modifyvm", :id, "--graphicscontroller", "vmsvga" ]
    vb.customize [ "modifyvm", :id, "--vram", "32" ]

    # Use NAT DNS proxy to fix potential DHCP issues (note: do not use --natdnshostresolver1 since this can cause horrible network slowdowns on macOS)
    vb.customize [ "modifyvm", :id, "--natdnsproxy1", "on" ]

    # Set NAT localhost reachable to on, required for network connectivity since VirtualBox version 7
    vb.customize [ "modifyvm", :id, "--nat-localhostreachable1", "on" ]
  end

  # Mount exercises into the Vagrant VM
  config.vm.synced_folder "..", "/projects"

  # Provision using ansible playbook, ansible should be installed on the image already
  config.vm.provision :ansible_local do |ansible|
    ansible.playbook = "/projects/provisioning/asdf.yml"
    ansible.install = false
    ansible.compatibility_mode = "2.0"
    ansible.become = true
  end
  config.vm.provision :ansible_local do |ansible|
    ansible.playbook = "/projects/docker-playbook.yml"
    ansible.install = false
    ansible.compatibility_mode = "2.0"
    ansible.become = true
  end
  config.vm.provision :ansible_local do |ansible|
    ansible.playbook = "/projects/helloworld-playbook.yml"
    ansible.install = false
    ansible.compatibility_mode = "2.0"
    ansible.become = true
  end
  config.vm.provision :ansible_local do |ansible|
    ansible.playbook = "/projects/os-playbook.yml"
    ansible.install = false
    ansible.compatibility_mode = "2.0"
    ansible.become = true
  end
end